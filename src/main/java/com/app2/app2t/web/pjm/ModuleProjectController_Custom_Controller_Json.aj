// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.app2.app2t.web.pjm;

import com.app2.app2t.domain.pjm.ModuleManager;
import com.app2.app2t.domain.pjm.ModuleMember;
import com.app2.app2t.domain.pjm.ModuleProject;
import com.app2.app2t.domain.pjm.Project;
import flexjson.JSONSerializer;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.util.UriComponentsBuilder;
import java.util.*;
import flexjson.JSONSerializer;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.Date;
import java.util.List;


privileged aspect ModuleProjectController_Custom_Controller_Json {

    @RequestMapping(value = "/saveModuleProject",method = RequestMethod.POST, produces = "text/html", headers = "Accept=application/json")
    public ResponseEntity<String> ModuleProjectController.saveModuleProject(
            @RequestParam(value = "moduleCode", required = false) String moduleCode,
            @RequestParam(value = "moduleName", required = false) String moduleName,
            @RequestParam(value = "moduleCost", required = false) Integer moduleCost,
            @RequestParam(value = "dateStart", required = false) Date dateStart,
            @RequestParam(value = "dateEnd", required = false) Date dateEnd,
            @RequestParam(value = "projectId", required = false) long projectId,
            @RequestParam(value = "arr_moduleManager", required = false) String moduleManager,
            @RequestParam(value = "arr_moduleMember", required = false) String moduleMember
    ) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json;charset=UTF-8");
        try {
            List<Project> project = Project.findProjectByIdProject(projectId);
            ModuleProject moduleProject = ModuleProject.saveModuleProject(moduleCode, moduleName, moduleCost, dateStart,
                    dateEnd, project.get(0));
            String[] arrManager = moduleManager.split("==");
            ModuleManager.saveModuleManagerByModuleProject(moduleProject,arrManager);
            String[] arrMember = moduleMember.split("==");
            ModuleMember.saveModuleMemberByModuleProject(moduleProject,arrMember);
            return new ResponseEntity<String>(new JSONSerializer().exclude("*.class").deepSerialize(moduleProject),headers, HttpStatus.CREATED);

        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


    @RequestMapping(value = "/findModuleByModuleCodeAndProjectId",method = RequestMethod.GET, produces = "text/html", headers = "Accept=application/json")
    public ResponseEntity<String> ModuleProjectController.findModuleByModuleCode(
            @RequestParam(value = "moduleCode", required = false) String moduleCode,
            @RequestParam(value = "projectId", required = false) long projectId,
            @RequestParam(value = "option", required = false) String option
    ) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json;charset=UTF-8");
        try {
            Project project = Project.findProject(projectId);
            List<ModuleProject> result = ModuleProject.findModuleByModuleCodeAndProjectId(moduleCode,project);
            option = option.toLowerCase();
            if(option.equals("size")) return  new ResponseEntity<String>(new JSONSerializer().exclude("*.class").deepSerialize(result.size()), headers, HttpStatus.OK);
            return  new ResponseEntity<String>(new JSONSerializer().exclude("*.class").deepSerialize(result), headers, HttpStatus.OK);
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/findModuleByProjectId",method = RequestMethod.GET, produces = "text/html", headers = "Accept=application/json")
    public ResponseEntity<String> ModuleProjectController.findAllNameModuleByProjectCode(
            @RequestParam(value = "projectId", required = false) long projectId
    ) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json;charset=UTF-8");
        try {
            List<Project> project = Project.findProjectByIdProject(projectId);
            List<ModuleProject> result = ModuleProject.findAllNameModuleByProjectCode(project.get(0));
            return  new ResponseEntity<String>(new JSONSerializer().exclude("*.class").deepSerialize(result), headers, HttpStatus.OK);
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


    @RequestMapping(value = "/editModuleProjectByModuleProjectCode",method = RequestMethod.POST, produces = "text/html", headers = "Accept=application/json")
    public ResponseEntity<String> ModuleProjectController.editModuleProjectByModuleProjectCode(
            @RequestParam(value = "moduleNeedEdit", required = false) String moduleNeedEdit,
            @RequestParam(value = "moduleCode", required = false) String moduleCode,
            @RequestParam(value = "moduleName", required = false) String moduleName,
            @RequestParam(value = "moduleCost", required = false) Integer moduleCost,
            @RequestParam(value = "dateStart", required = false) Date dateStart,
            @RequestParam(value = "dateEnd", required = false) Date dateEnd,
            @RequestParam(value = "arr_moduleManager", required = false) String arr_moduleManager,
            @RequestParam(value = "arr_moduleMember", required = false) String arr_moduleMember
    ) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json;charset=UTF-8");
        try {
            ModuleProject moduleProject = ModuleProject.editModuleProjectByModuleProjectCode(moduleNeedEdit,moduleCode,
                    moduleName,moduleCost,dateStart,dateEnd);
            // Edit
            ModuleManager.deleteModuleManagerByModuleProject(moduleProject);
            ModuleManager.saveModuleManagerByModuleProject(moduleProject, arr_moduleManager.split("=="));

            ModuleMember.deleteModuleMemberByModuleProject(moduleProject);
            ModuleMember.saveModuleMemberByModuleProject(moduleProject, arr_moduleMember.split("=="));

            return  new ResponseEntity<String>(headers, HttpStatus.OK);
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/increseCostByModuleNameAndProjectId",method = RequestMethod.POST, produces = "text/html", headers = "Accept=application/json")
    public ResponseEntity<String> ModuleProjectController.increseCostByModuleNameAndCodeProject(
            @RequestParam(value = "projectId", required = false) long projectId,
            @RequestParam(value = "codeModuleProject", required = false) String codeModuleProject,
            @RequestParam(value = "costIncrese", required = false) Integer costIncrese
    ) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json;charset=UTF-8");
        try {
            String costProjectandModuleProject = "";
            List<Project> projectList = Project.findProjectByIdProject(projectId);
            int totalCostModule = ModuleProject.findAllModuleCostByProject(projectList.get(0));
            Project project = Project.increseCostByModuleNameAndProjectId(projectId, costIncrese, totalCostModule);
            int moduleCost = ModuleProject.increseCostByModuleNameAndProjectId(project, codeModuleProject, costIncrese);
            costProjectandModuleProject += project.getProjectCost();
            costProjectandModuleProject += "," +moduleCost ;
            return  new ResponseEntity<String>(costProjectandModuleProject,headers, HttpStatus.OK);
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/findProjectBymoduleProjectAll",method = RequestMethod.GET, produces = "text/html", headers = "Accept=application/json")
    public ResponseEntity<String> ModuleProjectController.findProjectBymoduleProjectAll(
        ) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json;charset=UTF-8");
        try {
            List<ModuleProject> result = ModuleProject.findProjectBymoduleProjectAll();
            return  new ResponseEntity<String>(new JSONSerializer().exclude("*.class").deepSerialize(result), headers, HttpStatus.OK);
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/findModuleByProjectCode2",method = RequestMethod.GET, produces = "text/html", headers = "Accept=application/json")
    public ResponseEntity<String> ModuleProjectController.findAllNameModuleByProjectCode2(
        @RequestParam(value = "projectCode", required = false) String projectCode
        ,@RequestParam(value = "maxResult", required = false) Integer maxResult
        ,@RequestParam(value = "firstResult", required = false) Integer firstResult
    ) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json;charset=UTF-8");
        try {
            //LOGGER.info(">>>>>>>>>>>>>>"+projectCode);
            List<Project> project = Project.findProjectByProjectCode(projectCode);
           // LOGGER.info(">>>>>>>>>"+project.size());
            List<ModuleProject> result = ModuleProject.findAllNameModuleByProjectCode2(project.get(0));
            //LOGGER.info(">>>>>>Modul"+project);
            List<Map<String, Object>> list = new ArrayList<>();
            for(int i=firstResult;i<maxResult + firstResult && i < result.size();i++){
                ModuleProject ta = result.get(i);
                Map<String, Object> map = new HashMap<>();
                map.put("moduleName", ta.getModuleName());
                map.put("dateStart", ta.getDateStart() + "");
                map.put("dateEnd", ta.getDateEnd() + "");
                list.add(map);
            }
            return  new ResponseEntity<String>(new JSONSerializer().exclude("*.class").deepSerialize(result), headers, HttpStatus.OK);
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/findPaggingSizeModuleProject", method = RequestMethod.GET, produces = "text/html", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ModuleProjectController.findAllNameModuleByProjectCode2(
       @RequestParam(value = "projectCode", required = false) String projectCode
    ) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json;charset=UTF-8");
        try {
            List<Project> project = Project.findProjectByProjectCode(projectCode);
            List<ModuleProject> result = ModuleProject.findAllNameModuleByProjectCode2(project.get(0));
            Map data = new HashMap();
            data.put("size", result.size());
            return new ResponseEntity<String>(new JSONSerializer().exclude("*.class").deepSerialize(data), headers, HttpStatus.OK);
        } catch (Exception e) {
            LOGGER.error("findEvaPeriodTime :{}", e);
            return new ResponseEntity<String>("{\"ERROR\":" + e.getMessage() + "\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/findModuleProjectByModuleProjectID",method = RequestMethod.GET, produces = "text/html", headers = "Accept=application/json")
    public ResponseEntity<String> ModuleProjectController.findModuleProjectByModuleProjectID(
            @RequestParam(value = "id", required = false) Long id
        ) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json;charset=UTF-8");
        try {
            List<ModuleProject> moduleProjectes = ModuleProject.findModuleProjectByModuleProjectID(id);
            List<ModuleManager> resultSearch = ModuleManager.findModuleManagerByModuleProjectID(moduleProjectes.get(0));
            return  new ResponseEntity<String>(new JSONSerializer().exclude("*.class").deepSerialize(resultSearch), headers, HttpStatus.OK);
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/deleteModuleByModuleCode",method = RequestMethod.GET, produces = "text/html", headers = "Accept=application/json")
    public ResponseEntity<String> ModuleProjectController.deleteModuleByModuleCode(
            @RequestParam(value = "moduleCode", required = false) String moduleCode
    ) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json;charset=UTF-8");
        try {
            ModuleProject.deleteModuleByModuleCode(moduleCode);
            return  new ResponseEntity<String>(headers, HttpStatus.OK);
        } catch (Exception e) {
            LOGGER.error(e.getMessage(), e);
            return new ResponseEntity<String>("{\"ERROR\":"+e.getMessage()+"\"}", headers, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
