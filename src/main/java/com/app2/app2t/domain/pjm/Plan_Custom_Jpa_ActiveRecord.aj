// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.app2.app2t.domain.pjm;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

import com.app2.app2t.util.ConstantApplication;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.*;
import org.hibernate.sql.JoinType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.persistence.EntityManager;

privileged aspect Plan_Custom_Jpa_ActiveRecord {

    protected static Logger LOGGER = LoggerFactory.getLogger(Plan_Custom_Jpa_ActiveRecord.class);

    public static void Plan.insertPlan(Task task, Date dateStart, Date dateEnd, String note) {
        Plan plan = new Plan();
        plan.setTask(task);
        plan.setDateStart(dateStart);
        plan.setDateEnd(dateEnd);
        plan.setNote(note);
        plan.persist();
    }

    public static void Plan.insertOtherPlan(OtherTask otherTask, Date dateStart, Date dateEnd, String note) {
        Plan plan = new Plan();
        plan.setOtherTask(otherTask);
        plan.setDateStart(dateStart);
        plan.setDateEnd(dateEnd);
        plan.setNote(note);
        plan.persist();
    }

    public static List<Plan> Plan.findPlansByMonthYear(Date dateStart, Date dateEnd, String empCode) {
        EntityManager ent = Plan.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class, "Plan");
        criteria.createAlias("Plan.task", "task", JoinType.LEFT_OUTER_JOIN);
        criteria.createAlias("Plan.otherTask", "otherTask", JoinType.LEFT_OUTER_JOIN);
        criteria.add(Restrictions.or(
                Restrictions.eq("task.empCode", empCode),
                Restrictions.eq("otherTask.empCode", empCode)
        ));
        criteria.add(Restrictions.ge("dateStart", dateStart));
        criteria.add(Restrictions.lt("dateStart", dateEnd));

        List<Plan> listPlan = criteria.list();
        return listPlan;
    }

    public static List<Plan> Plan.findPlanOverlap(Date beginDate, Date endDate, Long planId, String empCode) {
        EntityManager ent = Plan.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class, "Plan");
        criteria.createAlias("Plan.task", "task", JoinType.LEFT_OUTER_JOIN);
        criteria.createAlias("Plan.otherTask", "otherTask", JoinType.LEFT_OUTER_JOIN);
        criteria.add(Restrictions.or(
                Restrictions.eq("task.empCode", empCode),
                Restrictions.eq("otherTask.empCode", empCode)
        ));
        criteria.add(Restrictions.ge("dateEnd", beginDate));
        criteria.add(Restrictions.le("dateStart", endDate));

        if(planId != null)
            criteria.add(Restrictions.ne("id", planId));

        List<Plan> listPlan = criteria.list();
        return listPlan;
    }

    public static List<Plan> Plan.findPlanEndAfter(Date beginDate, Long planId, String empCode) {
        EntityManager ent = Plan.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class, "Plan");
        criteria.createAlias("Plan.task", "task", JoinType.LEFT_OUTER_JOIN);
        criteria.createAlias("Plan.otherTask", "otherTask", JoinType.LEFT_OUTER_JOIN);
        criteria.add(Restrictions.or(
                Restrictions.eq("task.empCode", empCode),
                Restrictions.eq("otherTask.empCode", empCode)
        ));
        criteria.add(Restrictions.ge("dateEnd", beginDate));
        if(planId != null)
            criteria.add(Restrictions.ne("id", planId));
        criteria.addOrder(Order.asc("dateStart"));

        List<Plan> listPlan = criteria.list();
        return listPlan;
    }

    public static List<Plan> Plan.findPlanByOtherTask(OtherTask otherTask){
        EntityManager ent = Plan.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class);
        criteria.add(Restrictions.eq("otherTask", otherTask));
        return criteria.list();
    }

    public static Plan Plan.updatePlan(Long planId, Date dateStart, Date dateEnd, String note) {
        try {
            EntityManager ent = Plan.entityManager();
            Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class);
            criteria.add(Restrictions.eq("id", planId));
            List<Plan> plans = criteria.list();
            Plan plan = plans.get(0);
            plan.setDateStart(dateStart);
            plan.setDateEnd(dateEnd);
            plan.setNote(note);
            plan.merge();

            Plan.updatePlanNote(plan.getTask(), plan.getOtherTask(), note);

            return plan;
        } catch (Exception ex) {

        }

        return null;
    }

    public static void Plan.updatePlanNote(Task task, OtherTask otherTask, String note) {
        try {
            EntityManager ent = Plan.entityManager();
            Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class);
            if(task != null){
                criteria.add(Restrictions.eq("task", task));
            }
            if(otherTask != null){
                criteria.add(Restrictions.eq("otherTask", otherTask));
            }

            List<Plan> plans = criteria.list();
            for(Plan plan : plans){
                plan.setNote(note);
                plan.merge();
            }
        } catch (Exception ex) {

        }
    }

    public static OtherTask Plan.deleteById(long planId) {
        try {
            EntityManager ent = Plan.entityManager();
            Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class);
            criteria.add(Restrictions.eq("id", planId));
            List<Plan> plans = criteria.list();
            Plan plan = plans.get(0);
            OtherTask otherTask = plan.getOtherTask();
            plan.remove();
            return otherTask;
        } catch (Exception ex) {
            return null;
        }
    }

    public static List<Task> Plan.getPointPlanTaskComplete(Date beginDate, Date endDate, String empCode){
        try {
            // find complete task begin -> end date
            DetachedCriteria dcTaskBetweenBeginAndEnd = DetachedCriteria.forClass(Plan.class, "plan");
            dcTaskBetweenBeginAndEnd.add(Restrictions.ge("dateEnd", beginDate));
            dcTaskBetweenBeginAndEnd.add(Restrictions.le("dateEnd", endDate));
            dcTaskBetweenBeginAndEnd.createAlias("plan.task", "task");
            dcTaskBetweenBeginAndEnd.add(Restrictions.eq("task.taskStatus", ConstantApplication.getTaskStatusComplete()));
            dcTaskBetweenBeginAndEnd.add(Restrictions.eq("task.empCode", empCode));
            dcTaskBetweenBeginAndEnd.setProjection(Projections.distinct(Projections.property("plan.task")));

            // find complete task in date more than end date
            DetachedCriteria dcTaskMoreThanDateEndInBeginAndEnd = DetachedCriteria.forClass(Plan.class, "plan");
            dcTaskMoreThanDateEndInBeginAndEnd.add(Restrictions.gt("dateEnd", endDate));
            dcTaskMoreThanDateEndInBeginAndEnd.createAlias("plan.task", "task");
            dcTaskMoreThanDateEndInBeginAndEnd.add(Restrictions.eq("task.taskStatus", ConstantApplication.getTaskStatusComplete()));
            dcTaskMoreThanDateEndInBeginAndEnd.add(Restrictions.eq("task.empCode", empCode));
            dcTaskMoreThanDateEndInBeginAndEnd.setProjection(Projections.distinct(Projections.property("plan.task")));
            dcTaskMoreThanDateEndInBeginAndEnd.add(Subqueries.propertyIn("plan.task", dcTaskBetweenBeginAndEnd));

            EntityManager ent = Plan.entityManager();
            Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class, "plan");
            criteria.add(Restrictions.ge("dateEnd", beginDate));
            criteria.add(Restrictions.le("dateEnd", endDate));
            criteria.createAlias("plan.task", "task");
            criteria.add(Restrictions.eq("task.taskStatus", ConstantApplication.getTaskStatusComplete()));
            criteria.add(Restrictions.eq("task.empCode", empCode));
            criteria.add(Subqueries.propertyNotIn("task.id", dcTaskMoreThanDateEndInBeginAndEnd));
            criteria.setProjection(Projections.distinct(Projections.property("plan.task")));

            return criteria.list();
        } catch (Exception ex) {
            LOGGER.debug("{}", ex);
            return null;
        }
    }

    public static List<OtherTask> Plan.getPointPlanOtherTaskComplete(Date beginDate, Date endDate, String empCode){
        try {
            // find complete task begin -> end date
            DetachedCriteria dcTaskBetweenBeginAndEnd = DetachedCriteria.forClass(Plan.class, "plan");
            dcTaskBetweenBeginAndEnd.add(Restrictions.ge("dateEnd", beginDate));
            dcTaskBetweenBeginAndEnd.add(Restrictions.le("dateEnd", endDate));
            dcTaskBetweenBeginAndEnd.createAlias("plan.otherTask", "otherTask");
            dcTaskBetweenBeginAndEnd.add(Restrictions.eq("otherTask.progress", 100));
            dcTaskBetweenBeginAndEnd.add(Restrictions.eq("otherTask.empCode", empCode));
            dcTaskBetweenBeginAndEnd.setProjection(Projections.distinct(Projections.property("plan.otherTask")));

            // find complete task in date more than end date
            DetachedCriteria dcTaskMoreThanDateEndInBeginAndEnd = DetachedCriteria.forClass(Plan.class, "plan");
            dcTaskMoreThanDateEndInBeginAndEnd.add(Restrictions.gt("dateEnd", endDate));
            dcTaskMoreThanDateEndInBeginAndEnd.createAlias("plan.otherTask", "otherTask");
            dcTaskMoreThanDateEndInBeginAndEnd.add(Restrictions.eq("otherTask.progress", 100));
            dcTaskMoreThanDateEndInBeginAndEnd.add(Restrictions.eq("otherTask.empCode", empCode));
            dcTaskMoreThanDateEndInBeginAndEnd.setProjection(Projections.distinct(Projections.property("plan.otherTask")));
            dcTaskMoreThanDateEndInBeginAndEnd.add(Subqueries.propertyIn("plan.otherTask", dcTaskBetweenBeginAndEnd));

            EntityManager ent = Plan.entityManager();
            Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class, "plan");
            criteria.add(Restrictions.ge("dateEnd", beginDate));
            criteria.add(Restrictions.le("dateEnd", endDate));
            criteria.createAlias("plan.otherTask", "otherTask");
            criteria.add(Restrictions.eq("otherTask.progress", 100));
            criteria.add(Restrictions.eq("otherTask.empCode", empCode));
            criteria.add(Subqueries.propertyNotIn("otherTask.id", dcTaskMoreThanDateEndInBeginAndEnd));
            criteria.setProjection(Projections.distinct(Projections.property("plan.otherTask")));

            return criteria.list();
        } catch (Exception ex) {
            LOGGER.debug("{}", ex);
            return null;
        }
    }

    public static List<ModuleMember> Plan.findEmpCodeInModuleMemberByYearAndProjectAndModuleProjectAndTeam (String startProject,String endProject,String projectId,String moduleProjectId,ArrayList<String> listEmp) throws Exception {
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        Date dStart = new Date(Long.parseLong(startProject));
        try {
            dStart = formatter.parse(formatter.format(dStart));
        }catch (ParseException e){
            e.printStackTrace();
        }

        Date dEnd = new Date(Long.parseLong(endProject));
        try {
            dEnd = formatter.parse(formatter.format(dEnd));
        }catch (ParseException e){
            e.printStackTrace();
        }

        EntityManager ent = Plan.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(ModuleMember.class , "ModuleMember");
        criteria.createAlias("ModuleMember.moduleProject", "moduleProject", JoinType.LEFT_OUTER_JOIN);
        criteria.createAlias("moduleProject.project", "Project", JoinType.LEFT_OUTER_JOIN);
//        criteria.add(Restrictions.ge("Project.dateStart", dStart));
//        criteria.add(Restrictions.le("Project.dateStart", dEnd));
        if(projectId != "") criteria.add(Restrictions.eq("Project.id", Long.parseLong(projectId)));
        if(moduleProjectId!="") criteria.add(Restrictions.eq("moduleProject.id", Long.parseLong(moduleProjectId)));
        if(listEmp.size()!=0) criteria.add(Restrictions.in("ModuleMember.empCode", listEmp));
        List<ModuleMember> listMember = criteria.list();
        return listMember;
    }

    public static List<ModuleManager> Plan.findEmpCodeInModuleManagerByYearAndProjectAndModuleProjectAndTeam (String startProject,String endProject,String projectId,String moduleProjectId,ArrayList<String>  listEmp) throws Exception {
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        Date dStart = new Date(Long.parseLong(startProject));
        try {
            dStart = formatter.parse(formatter.format(dStart));
        }catch (ParseException e){
            e.printStackTrace();
        }

        Date dEnd = new Date(Long.parseLong(endProject));
        try {
            dEnd = formatter.parse(formatter.format(dEnd));
        }catch (ParseException e){
            e.printStackTrace();
        }

        EntityManager ent = Plan.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(ModuleManager.class , "ModuleManager");
        criteria.createAlias("ModuleManager.moduleProject", "moduleProject", JoinType.LEFT_OUTER_JOIN);
        criteria.createAlias("moduleProject.project", "Project", JoinType.LEFT_OUTER_JOIN);
//        criteria.add(Restrictions.ge("Project.dateStart", dStart));
//        criteria.add(Restrictions.le("Project.dateStart", dEnd));
        if(projectId != "") criteria.add(Restrictions.eq("Project.id", Long.parseLong(projectId)));
        if(moduleProjectId!="") criteria.add(Restrictions.eq("moduleProject.id", Long.parseLong(moduleProjectId)));
        if(listEmp.size()!=0) criteria.add(Restrictions.in("ModuleManager.empCode", listEmp));
        List<ModuleManager> listManager = criteria.list();
        return listManager;
    }

    public static List<ProjectManager> Plan.findEmpCodeInProjectManagerByYearAndProjectAndTeam (String startProject,String endProject,String projectId,ArrayList<String>  listEmp) throws Exception {
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        Date dStart = new Date(Long.parseLong(startProject));
        try {
            dStart = formatter.parse(formatter.format(dStart));
        }catch (ParseException e){
            e.printStackTrace();
        }

        Date dEnd = new Date(Long.parseLong(endProject));
        try {
            dEnd = formatter.parse(formatter.format(dEnd));
        }catch (ParseException e){
            e.printStackTrace();
        }

        EntityManager ent = Plan.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(ProjectManager.class , "projectManager");
        criteria.createAlias("projectManager.project", "Project", JoinType.LEFT_OUTER_JOIN);
//        criteria.add(Restrictions.ge("Project.dateStart", dStart));
//        criteria.add(Restrictions.le("Project.dateStart", dEnd));
        if(projectId != "") criteria.add(Restrictions.eq("Project.id", Long.parseLong(projectId)));
        if(listEmp.size()!=0) criteria.add(Restrictions.in("projectManager.empCode", listEmp));
        List<ProjectManager> listManager = criteria.list();
        return listManager;
    }

    public static Map<String,Object> Plan.findPlansByEmpCode (String empCode, String statProject, String endProject) throws Exception {
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        Date dStart = new Date(Long.parseLong(statProject));
        Date dEnd = new Date(Long.parseLong(endProject));
        try {
            dStart = formatter.parse(formatter.format(dStart));
            dEnd = formatter.parse(formatter.format(dEnd));
        }catch (ParseException e){
            e.printStackTrace();
        }
        EntityManager ent = Plan.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class , "plan");
        criteria.createAlias("plan.task", "Task");
        criteria.add(Restrictions.eq("Task.empCode", empCode));
        criteria.add(Restrictions.ge("plan.dateStart",dStart));
//        criteria.add(Restrictions.le("plan.dateEnd",dEnd));
        criteria.setProjection(Projections.projectionList()
                .add(Projections.property("Task.taskName"))
                .add(Projections.property("Task.taskCost"))
                .add(Projections.property("plan.dateStart"))
                .add(Projections.property("plan.dateEnd"))
        );
        List<Plan> listTask = criteria.list();

        EntityManager ent1 = Plan.entityManager();
        Criteria criteria1 = ((Session) ent1.getDelegate()).createCriteria(Plan.class , "plan");
        criteria1.createAlias("plan.otherTask", "otherTask");
        criteria1.add(Restrictions.eq("otherTask.empCode", empCode));
        criteria1.add(Restrictions.ge("plan.dateStart",dStart));
//        criteria.add(Restrictions.le("plan.dateEnd",dEnd));
        criteria.setProjection(Projections.projectionList()
                .add(Projections.property("otherTask.taskName"))
                .add(Projections.property("otherTask.taskCost"))
                .add(Projections.property("plan.dateStart"))
                .add(Projections.property("plan.dateEnd"))
        );
        List<Plan> listOtherTask = criteria1.list();
        Map<String,Object> maps = new HashMap<>();
        maps.put("Task",listTask);
        maps.put("OtherTask",listOtherTask);
        return maps;
    }

    public static Long Plan.findPlanByID(Long id) {
        Session session = (Session) Plan.entityManager().getDelegate();
        Criteria criteria = session.createCriteria(Plan.class, "Plan");
        criteria.createAlias("Plan.task", "task");
        criteria.add(Restrictions.eq("task.id", id));
        criteria.setProjection(Projections.rowCount());
        return (Long) criteria.uniqueResult();
    }

    public static List<Plan> Plan.findPlanByModule(ModuleProject moduleProject){
        EntityManager ent = Plan.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class , "Plan");
        criteria.createAlias("Plan.task", "Task", JoinType.LEFT_OUTER_JOIN);
        criteria.createAlias("Task.program", "Program", JoinType.LEFT_OUTER_JOIN);
        criteria.add(Restrictions.eq("Program.moduleProject", moduleProject));
        List<Plan> listPlan = criteria.list();
        return listPlan;
    }

    public static Criteria Plan.selectPlanTofirstPage(String empCode) {
        EntityManager ent = Plan.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class,"plan");

        Date currentDate = new Date();
        String modifiedDate= new SimpleDateFormat("MM/dd/yyyy").format(currentDate);
        Date date = new Date(modifiedDate);
//        LOGGER.debug("><<><><><><><>++++++++++++++++++++++ \n" + date);
//        Date date = new Date ("03/01/2016");
        criteria.add(Restrictions.le("plan.dateStart",date));
        criteria.add(Restrictions.ge("plan.dateEnd",date));

        criteria.createAlias("plan.task","task",JoinType.LEFT_OUTER_JOIN);
        criteria.createAlias("plan.otherTask","otherTask",JoinType.LEFT_OUTER_JOIN);
        criteria.add(Restrictions.or(
                Restrictions.eq("task.empCode", empCode),
                Restrictions.eq("otherTask.empCode", empCode)
        ));


        return criteria;
    }

    public static List<Plan> Plan.findtaskTodayPagingData(String empCode,
                                                          Integer maxResult,
                                                          Integer firstResult

    ){
        Criteria criteria = Plan.selectPlanTofirstPage(empCode)
                .setFirstResult(firstResult)
                .setMaxResults(maxResult);
        return criteria.list();
    }
    public static  Long Plan.findtaskTodayPagingSize(String empCode

    ){
        Criteria criteria = Plan.selectPlanTofirstPage(empCode)
                .setProjection(Projections.rowCount());
        return (Long) criteria.uniqueResult();
    }

    public static Criteria Plan.selectPlanBaclLogTofirstPage(String empCode) {
        EntityManager ent = Plan.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class,"plan");

        Date currentDate = new Date();
        String modifiedDate= new SimpleDateFormat("MM/dd/yyyy").format(currentDate);
        Date date = new Date(modifiedDate);
//        LOGGER.debug("><<><><><><><>++++++++++++++++++++++ \n" + date2);
//        Date date = new Date ("06/01/2016");
        criteria.add(Restrictions.lt("plan.dateEnd",date));
        criteria.createAlias("plan.task","task",JoinType.LEFT_OUTER_JOIN);
        criteria.createAlias("plan.otherTask","otherTask",JoinType.LEFT_OUTER_JOIN);
        criteria.add(Restrictions.or(
                Restrictions.eq("task.empCode", empCode),
                Restrictions.eq("otherTask.empCode", empCode)
        ));
        criteria.add(Restrictions.or(
                Restrictions.eq("task.taskStatus", ConstantApplication.getTaskStatusNew()),
                Restrictions.lt("otherTask.progress", 100)
        ));
        return criteria;
    }

    public static List<Plan> Plan.findtaskBackLogPagingData(String empCode,
                                                            Integer maxResult,
                                                            Integer firstResult

    ){
        Criteria criteria = Plan.selectPlanBaclLogTofirstPage(empCode)
                .setFirstResult(firstResult)
                .setMaxResults(maxResult);
        return criteria.list();
    }
    public static  Long Plan.findtaskBackLogPagingSize(String empCode

    ){
        Criteria criteria = Plan.selectPlanBaclLogTofirstPage(empCode)
                .setProjection(Projections.rowCount());
        return (Long) criteria.uniqueResult();
    }

    public static Map<String,Object> Plan.findPlansByDateStartAndDateEnd (String statProject,String endProject) throws Exception {
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        Date dStart = new Date(Long.parseLong(statProject));
        Date dEnd = new Date(Long.parseLong(endProject));
        try {
            dStart = formatter.parse(formatter.format(dStart));
            dEnd = formatter.parse(formatter.format(dEnd));
        }catch (ParseException e){
            e.printStackTrace();
        }
        EntityManager ent = Plan.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class , "plan");
        criteria.createAlias("plan.task", "Task");
        criteria.add(Restrictions.ge("plan.dateStart",dStart));
        criteria.add(Restrictions.le("plan.dateEnd",dEnd));
        criteria.setProjection(Projections.projectionList()
                .add(Projections.property("Task.taskName"))
                .add(Projections.property("Task.taskCost"))
                .add(Projections.property("plan.dateStart"))
                .add(Projections.property("plan.dateEnd"))
        );
        List<Plan> listTask = criteria.list();

        EntityManager ent1 = Plan.entityManager();
        Criteria criteria1 = ((Session) ent1.getDelegate()).createCriteria(Plan.class , "plan");
        criteria1.createAlias("plan.otherTask", "otherTask");
        criteria1.add(Restrictions.ge("plan.dateStart",dStart));
        criteria.add(Restrictions.le("plan.dateEnd",dEnd));
        criteria.setProjection(Projections.projectionList()
                .add(Projections.property("otherTask.taskName"))
                .add(Projections.property("otherTask.taskCost"))
                .add(Projections.property("plan.dateStart"))
                .add(Projections.property("plan.dateEnd"))
        );
        List<Plan> listOtherTask = criteria1.list();
        Map<String,Object> maps = new HashMap<>();
        maps.put("Task",listTask);
        maps.put("OtherTask",listOtherTask);
        return maps;
    }

    public static Boolean Plan.updatePlanNotePageHome(Task task, OtherTask otherTask, String note,Integer versionPlan) {
        boolean status =false;
        try {
            EntityManager ent = Plan.entityManager();
            Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class);
            if(task != null){
                criteria.add(Restrictions.eq("task", task));
            }
            if(otherTask != null){
                criteria.add(Restrictions.eq("otherTask", otherTask));
            }

            List<Plan> plans = criteria.list();
            if(plans.get(0).getVersion() == versionPlan)
            {
                for (Plan plan : plans) {
                    plan.setNote(note);
                    plan.merge();
                    status = true;
                }
                return status;
            }
            else {
                return  status ;
            }

        } catch (Exception ex) {
            return null ;
        }
    }
}
