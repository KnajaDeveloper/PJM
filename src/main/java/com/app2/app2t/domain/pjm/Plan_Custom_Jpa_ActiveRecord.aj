// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.app2.app2t.domain.pjm;

import com.app2.app2t.domain.pjm.Plan;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.*;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;

privileged aspect Plan_Custom_Jpa_ActiveRecord {

    public static void Plan.insertPlan(Task task, Date dateStart, Date dateEnd) {
        Plan plan = new Plan();
        plan.setTask(task);
        plan.setDateStart(dateStart);
        plan.setDateEnd(dateEnd);
        plan.persist();
    }

    public static void Plan.insertOtherPlan(OtherTask otherTask, Date dateStart, Date dateEnd) {
        Plan plan = new Plan();
        plan.setOtherTask(otherTask);
        plan.setDateStart(dateStart);
        plan.setDateEnd(dateEnd);
        plan.persist();
    }

    public static List<Plan> Plan.findPlansByMonthYear(int month, int year, String empCode) {

        String datePreviousMonth = "01/01/1111";
        String dateNextMonth = "01/01/1111";

        DecimalFormat fm = new DecimalFormat("00");
        SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");

        if (month == 1) {
            datePreviousMonth = "12/15/" + (year - 1);
            dateNextMonth = "02/15/" + year;
        } else if (month == 12) {
            datePreviousMonth = "11/15/" + year;
            dateNextMonth = "01/15/" + (year + 1);
        } else {
            datePreviousMonth = fm.format(month - 1) + "/25/" + year;
            dateNextMonth = fm.format(month + 1) + "/15/" + year;
        }

        EntityManager ent = Plan.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class, "Plan");
        Criteria criteria2 = ((Session) ent.getDelegate()).createCriteria(Plan.class, "Plan2");
        criteria.createAlias("Plan.task", "task");
        criteria2.createAlias("Plan2.otherTask", "otherTask");

        try {
            criteria.add(Restrictions.eq("task.empCode", empCode));
            criteria.add(Restrictions.ge("dateStart", formatter.parse(datePreviousMonth)));
            criteria.add(Restrictions.lt("dateStart", formatter.parse(dateNextMonth)));

            criteria2.add(Restrictions.eq("otherTask.empCode", empCode));
            criteria2.add(Restrictions.ge("dateStart", formatter.parse(datePreviousMonth)));
            criteria2.add(Restrictions.lt("dateStart", formatter.parse(dateNextMonth)));
        } catch (Exception e) {

        }

        List<Plan> plans = new ArrayList<>(criteria.list());
        plans.addAll(criteria2.list());

        return plans;
    }

    public static List<Plan> Plan.findPlanOverlap(Date beginDate, Date endDate) {
        EntityManager ent = Plan.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class);

        try {
            criteria.add(Restrictions.ge("dateEnd", beginDate));
            criteria.add(Restrictions.le("dateStart", endDate));
            criteria.addOrder(Order.asc("dateStart"));
        } catch (Exception e) {
            
        }

        return criteria.list();
    }

    public static List<Plan> Plan.findPlanEndAfter(Date beginDate) {
        EntityManager ent = Plan.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class);

        try {
            criteria.add(Restrictions.ge("dateEnd", beginDate));
            criteria.addOrder(Order.asc("dateStart"));
        } catch (Exception e) {
            
        }

        return criteria.list();
    }

    public static Plan Plan.updatePlan(Long planId, Date dateStart, Date dateEnd) {
        try {
            EntityManager ent = Plan.entityManager();
            Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class);
            criteria.add(Restrictions.eq("id", planId));
            List<Plan> plans = criteria.list();
            Plan plan = plans.get(0);
            plan.setDateStart(dateStart);
            plan.setDateEnd(dateEnd);
            plan.merge();

            return plan;
        } catch (Exception ex) {

        }

        return null;
    }

    public static void Plan.deleteById(long planId) {
        try {
            EntityManager ent = Plan.entityManager();
            Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Plan.class);
            criteria.add(Restrictions.eq("id", planId));
            List<Plan> plans = criteria.list();
            Plan plan = plans.get(0);
            plan.remove();
        } catch (Exception ex) {

        }
    }
}
