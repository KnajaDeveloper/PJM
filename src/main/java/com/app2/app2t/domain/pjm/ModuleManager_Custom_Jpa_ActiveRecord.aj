// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.app2.app2t.domain.pjm;

import com.app2.app2t.domain.pjm.ModuleManager;
import java.util.List;

import com.sun.xml.internal.ws.api.server.Module;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;

privileged aspect ModuleManager_Custom_Jpa_ActiveRecord {

    protected static Logger LOGGER = LoggerFactory.getLogger(ModuleManager_Custom_Jpa_ActiveRecord.class);

    public static void ModuleManager.saveModuleManagerByModuleProject(ModuleProject moduleproject,String[] empCode) {
        EntityManager ent = ProjectManager.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(ModuleManager.class);
        for(String name : empCode){
            ModuleManager mm = new ModuleManager();
            mm.setEmpCode(name);
            mm.setModuleProject(moduleproject);
            mm.persist();
        }
    }

    public static void ModuleManager.deleteModuleManagerByModuleProject(ModuleProject moduleproject) {
        EntityManager ent = ModuleManager.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(ModuleManager.class);
        criteria.add(Restrictions.eq("moduleProject", moduleproject));
        List<ModuleManager> moduleManagersList = criteria.list();
        for(int i=0;i<moduleManagersList.size();i++){
            ModuleManager mm = moduleManagersList.get(i);
            mm.remove();
        }
    }

}
