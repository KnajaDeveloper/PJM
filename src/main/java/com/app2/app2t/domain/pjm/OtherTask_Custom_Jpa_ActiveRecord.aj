// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.app2.app2t.domain.pjm;

import com.app2.app2t.util.ConstantApplication;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

import javax.persistence.EntityManager;
import java.util.List;

privileged aspect OtherTask_Custom_Jpa_ActiveRecord {

    public static OtherTask OtherTask.insertOtherTask(String taskName, Double taskCost, String userName) {
        OtherTask otherTask = new OtherTask();
        otherTask.setTaskName(taskName);
        otherTask.setTaskCost(taskCost);
        otherTask.setProgress(0);
        otherTask.setEmpCode(userName);
        otherTask.persist();

        return  otherTask;
    }


    public static Long OtherTask.findAllTypeTaskByID(Long id) {
        Session session = (Session) OtherTask.entityManager().getDelegate();
        Criteria criteria = session.createCriteria(OtherTask.class, "OtherTask");
        criteria.createAlias("OtherTask.typeTask", "typeTask");
        criteria.add(Restrictions.eq("typeTask.id", id));
        criteria.setProjection(Projections.rowCount());
        return (Long) criteria.uniqueResult();
    }

    public static List<OtherTask> OtherTask.findEmptyOtherTask() {
        EntityManager ent = OtherTask.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(OtherTask.class, "otherTask");
        criteria.add(Restrictions.isNull("otherTask.empCode"));
        return criteria.list();
    }

    public static void OtherTask.deleteOtherTask(OtherTask otherTask){
        otherTask.remove();
    }
    public static List<OtherTask> OtherTask.findOtherTaskByEmpCode(String empCode) {
        EntityManager ent = OtherTask.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(OtherTask.class);
        criteria.add(Restrictions.eq("empCode", empCode));
        return criteria.list();
    }

    public static boolean OtherTask.updateOtherTaskProgress(Long taskId, Integer progress,String note,Integer versionPlan,Integer versionTask) {
        boolean statusTask = false; boolean statusPlan = false ;
        EntityManager ent = OtherTask.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(OtherTask.class);
        criteria.add(Restrictions.eq("id", taskId));
        List<OtherTask> result = criteria.list();
        OtherTask otherTask = result.get(0);
        if(otherTask.getVersion() == versionTask)
        {
            otherTask.setProgress(progress);
            otherTask.merge();
            statusTask = true ;
        }

//        if(!note.isEmpty()){
          statusPlan = Plan.updatePlanNotePageHome(null,otherTask, note,versionPlan);
//        }

        if(statusTask && statusPlan)
        {
            return  true ;
        }
        else {
            return  false ;
        }
    }
    
}
