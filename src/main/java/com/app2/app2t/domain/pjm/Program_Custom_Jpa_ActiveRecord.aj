// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
package com.app2.app2t.domain.pjm;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.persistence.EntityManager;
import java.util.*;

import com.app2.app2t.util.ApplicationConstant;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.*;
import org.apache.commons.io.IOUtils;
import  org.apache.commons.io.FileUtils;
import org.springframework.util.FileCopyUtils;
import java.text.*;
import java.io.*;

privileged aspect Program_Custom_Jpa_ActiveRecord {

    protected static Logger LOGGER = LoggerFactory.getLogger(Program_Custom_Jpa_ActiveRecord.class);

    public static Criteria Program.queryProgramPagging(Long id){
        Session session = (Session) Program.entityManager().getDelegate();
        Criteria criteria = session.createCriteria(Program.class, "program");
        criteria.createAlias("program.moduleProject", "moduleProject");
        criteria.add(Restrictions.eq("moduleProject.id", id));
        return criteria;
    }

    public static  List<Program> Program.findProgramDataPagingData(
        Long id
        ,Integer firstResult
        ,Integer maxResult
    ){
        Criteria criteria = Program.queryProgramPagging(id)
                .setFirstResult(firstResult)
                .setMaxResults(maxResult);
        return criteria.list();
    }

    public static  Long Program.findProgramDataPagingSize(
        Long id
    ){
        Criteria criteria = Program.queryProgramPagging(id)
                .setProjection(Projections.rowCount());
        return (Long) criteria.uniqueResult();
    }

    public static Program Program.saveProgram(String programCode, String programName, ModuleProject moduleProject) {
        EntityManager ent = Program.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Program.class);
        Program program = new Program();
        program.setProgramCode(programCode);
        program.setProgramName(programName);
        program.setModuleProject(moduleProject);
        program.persist();
        return program;
    }

    public static List<Program> Program.findProgramByProgramCode(String programCode) {
        EntityManager ent = Program.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Program.class);
        criteria.add(Restrictions.eq("programCode", programCode));
        return criteria.list();
    }

    public static List<Program> Program.findProgramByID(Long id) {
        EntityManager ent = Program.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Program.class);
        criteria.add(Restrictions.eq("id", id));
        return criteria.list();
    }

    public static List<Program> Program.findEditProgram(Long id, String programCode, String programName) {
        EntityManager ent = Program.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Program.class);
        criteria.add(Restrictions.eq("id", id));
        criteria.add(Restrictions.eq("programCode", programCode));
        List<Program> ep = criteria.list();
        Program edProgram = ep.get(0);
        edProgram.setProgramName(programName);
        edProgram.merge();
        return criteria.list();
    }

    public static List<Program> Program.findDeleteProgram(Long id, Long programId) {
        EntityManager ent = Program.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Program.class, "program");
        criteria.createAlias("program.moduleProject", "moduleProject");
        criteria.add(Restrictions.eq("moduleProject.id", id));
        criteria.add(Restrictions.eq("id", programId));

        try{
            String pathFile = ApplicationConstant.PATH_PJM_FILE + programId + "/";
            File path = new File(pathFile);
            FileUtils.deleteDirectory(path);
        }catch(Exception e){
            LOGGER.error("Error : {}", e);
            throw new RuntimeException(e);
        }

        List<Program> ep = criteria.list();
        Program edProgram = ep.get(0);
        edProgram.remove();
        return criteria.list();
    }

    public static List<Program> Program.findSizeProgramByProgramCode(Long id, String programCode) {
        EntityManager ent = Program.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Program.class, "program");
        criteria.createAlias("program.moduleProject", "moduleProject");
        criteria.add(Restrictions.eq("moduleProject.id", id));
        criteria.add(Restrictions.eq("programCode", programCode));
        return criteria.list();
    }

    public static List<Program> Program.findProgramByModuleProject(ModuleProject moduleProject) {
        EntityManager ent = Program.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Program.class, "program");
        criteria.createAlias("program.moduleProject", "moduleProject");
        criteria.add(Restrictions.eq("moduleProject", moduleProject));
        return criteria.list();
    }
}