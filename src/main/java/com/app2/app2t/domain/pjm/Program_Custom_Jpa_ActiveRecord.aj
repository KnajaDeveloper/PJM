// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
package com.app2.app2t.domain.pjm;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.persistence.EntityManager;
import java.util.List;

privileged aspect Program_Custom_Jpa_ActiveRecord {

    protected static Logger LOGGER = LoggerFactory.getLogger(Program_Custom_Jpa_ActiveRecord.class);

    public static Program Program.saveProgram(String programCode, String programName, ModuleProject moduleProject) {
        EntityManager ent = Program.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Program.class);
        Program program = new Program();
        program.setProgramCode(programCode);
        program.setProgramName(programName);
        program.setModuleProject(moduleProject);
        program.persist();
        return program;
    }

    public static List<Program> Program.findProjectByProgram(ModuleProject moduleProject) {
        EntityManager ent = Program.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Program.class, "program");
        criteria.createAlias("program.moduleProject", "moduleProject");
        criteria.add(Restrictions.eq("moduleProject", moduleProject));
        return criteria.list();
    }

    public static List<Program> Program.findProgramByProgramCode(String programCode) {
        EntityManager ent = Program.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Program.class);
        criteria.add(Restrictions.eq("programCode", programCode));
        return criteria.list();
    }

    public static List<Program> Program.findEditProgram(ModuleProject moduleProject, String programCode, String programName) {
        EntityManager ent = Program.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Program.class, "program");
        criteria.createAlias("program.moduleProject", "moduleProject");
        criteria.add(Restrictions.eq("moduleProject", moduleProject));
        criteria.add(Restrictions.eq("programCode", programCode));
        List<Program> ep = criteria.list();
        Program edProgram = ep.get(0);
        edProgram.setProgramName(programName);
        edProgram.merge();
        return criteria.list();
    }

    public static List<Program> Program.findDeleteProgram(ModuleProject moduleProject, String programCode) {
        criteria.add(Restrictions.eq("programCode", programCode));
        List<Program> ep = criteria.list();
        Program edProgram = ep.get(0);
        edProgram.remove();
        return criteria.list();
    }

    public static List<Program> Program.findSizeProgramByProgramCode(ModuleProject moduleProject, String programCode) {
        EntityManager ent = Program.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Program.class, "program");
        criteria.createAlias("program.moduleProject", "moduleProject");
        criteria.add(Restrictions.eq("moduleProject", moduleProject));
        criteria.add(Restrictions.eq("programCode", programCode));
        return criteria.list();
    }

    public static List<Program> Program.findProgramByModuleProject(ModuleProject moduleProject) {
        EntityManager ent = Program.entityManager();
        Criteria criteria = ((Session) ent.getDelegate()).createCriteria(Program.class, "program");
        criteria.createAlias("program.moduleProject", "moduleProject");
        criteria.add(Restrictions.eq("moduleProject", moduleProject));
        return criteria.list();
    }
}