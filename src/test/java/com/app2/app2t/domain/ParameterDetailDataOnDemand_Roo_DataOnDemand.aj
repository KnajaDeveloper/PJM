// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.app2.app2t.domain;

import com.app2.app2t.domain.AppParameterDataOnDemand;
import com.app2.app2t.domain.ParameterDetail;
import com.app2.app2t.domain.ParameterDetailDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ParameterDetailDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ParameterDetailDataOnDemand: @Component;
    
    private Random ParameterDetailDataOnDemand.rnd = new SecureRandom();
    
    private List<ParameterDetail> ParameterDetailDataOnDemand.data;
    
    @Autowired
    AppParameterDataOnDemand ParameterDetailDataOnDemand.appParameterDataOnDemand;
    
    public ParameterDetail ParameterDetailDataOnDemand.getNewTransientParameterDetail(int index) {
        ParameterDetail obj = new ParameterDetail();
        setCode(obj, index);
        setCreatedBy(obj, index);
        setCreatedDate(obj, index);
        setParameterDescription(obj, index);
        setParameterValue1(obj, index);
        setParameterValue2(obj, index);
        setParameterValue3(obj, index);
        setParameterValue4(obj, index);
        setParameterValue5(obj, index);
        setParameterValue6(obj, index);
        setParameterValue7(obj, index);
        setParameterValue8(obj, index);
        setParameterValue9(obj, index);
        setParameterValue10(obj, index);
        setStatus(obj, index);
        setUpdatedBy(obj, index);
        setUpdatedDate(obj, index);
        return obj;
    }
    
    public void ParameterDetailDataOnDemand.setCode(ParameterDetail obj, int index) {
        String code = "code_" + index;
        obj.setCode(code);
    }
    
    public void ParameterDetailDataOnDemand.setCreatedBy(ParameterDetail obj, int index) {
        String createdBy = "createdBy_" + index;
        obj.setCreatedBy(createdBy);
    }
    
    public void ParameterDetailDataOnDemand.setCreatedDate(ParameterDetail obj, int index) {
        Date createdDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(createdDate);
    }
    
    public void ParameterDetailDataOnDemand.setParameterDescription(ParameterDetail obj, int index) {
        String parameterDescription = "parameterDescription_" + index;
        obj.setParameterDescription(parameterDescription);
    }
    
    public void ParameterDetailDataOnDemand.setParameterValue1(ParameterDetail obj, int index) {
        String parameterValue1 = "parameterValue1_" + index;
        obj.setParameterValue1(parameterValue1);
    }
    
    public void ParameterDetailDataOnDemand.setParameterValue2(ParameterDetail obj, int index) {
        String parameterValue2 = "parameterValue2_" + index;
        obj.setParameterValue2(parameterValue2);
    }
    
    public void ParameterDetailDataOnDemand.setParameterValue3(ParameterDetail obj, int index) {
        String parameterValue3 = "parameterValue3_" + index;
        obj.setParameterValue3(parameterValue3);
    }
    
    public void ParameterDetailDataOnDemand.setParameterValue4(ParameterDetail obj, int index) {
        String parameterValue4 = "parameterValue4_" + index;
        obj.setParameterValue4(parameterValue4);
    }
    
    public void ParameterDetailDataOnDemand.setParameterValue5(ParameterDetail obj, int index) {
        String parameterValue5 = "parameterValue5_" + index;
        obj.setParameterValue5(parameterValue5);
    }
    
    public void ParameterDetailDataOnDemand.setParameterValue6(ParameterDetail obj, int index) {
        String parameterValue6 = "parameterValue6_" + index;
        obj.setParameterValue6(parameterValue6);
    }
    
    public void ParameterDetailDataOnDemand.setParameterValue7(ParameterDetail obj, int index) {
        String parameterValue7 = "parameterValue7_" + index;
        obj.setParameterValue7(parameterValue7);
    }
    
    public void ParameterDetailDataOnDemand.setParameterValue8(ParameterDetail obj, int index) {
        String parameterValue8 = "parameterValue8_" + index;
        obj.setParameterValue8(parameterValue8);
    }
    
    public void ParameterDetailDataOnDemand.setParameterValue9(ParameterDetail obj, int index) {
        String parameterValue9 = "parameterValue9_" + index;
        obj.setParameterValue9(parameterValue9);
    }
    
    public void ParameterDetailDataOnDemand.setParameterValue10(ParameterDetail obj, int index) {
        String parameterValue10 = "parameterValue10_" + index;
        obj.setParameterValue10(parameterValue10);
    }
    
    public void ParameterDetailDataOnDemand.setStatus(ParameterDetail obj, int index) {
        String status = "status_" + index;
        obj.setStatus(status);
    }
    
    public void ParameterDetailDataOnDemand.setUpdatedBy(ParameterDetail obj, int index) {
        String updatedBy = "updatedBy_" + index;
        obj.setUpdatedBy(updatedBy);
    }
    
    public void ParameterDetailDataOnDemand.setUpdatedDate(ParameterDetail obj, int index) {
        Date updatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedDate(updatedDate);
    }
    
    public ParameterDetail ParameterDetailDataOnDemand.getSpecificParameterDetail(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ParameterDetail obj = data.get(index);
        Long id = obj.getId();
        return ParameterDetail.findParameterDetail(id);
    }
    
    public ParameterDetail ParameterDetailDataOnDemand.getRandomParameterDetail() {
        init();
        ParameterDetail obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ParameterDetail.findParameterDetail(id);
    }
    
    public boolean ParameterDetailDataOnDemand.modifyParameterDetail(ParameterDetail obj) {
        return false;
    }
    
    public void ParameterDetailDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ParameterDetail.findParameterDetailEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ParameterDetail' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ParameterDetail>();
        for (int i = 0; i < 10; i++) {
            ParameterDetail obj = getNewTransientParameterDetail(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
