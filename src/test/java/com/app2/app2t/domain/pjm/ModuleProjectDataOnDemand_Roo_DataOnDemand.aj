// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.app2.app2t.domain.pjm;

import com.app2.app2t.domain.pjm.ModuleProject;
import com.app2.app2t.domain.pjm.ModuleProjectDataOnDemand;
import com.app2.app2t.domain.pjm.ProjectDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ModuleProjectDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ModuleProjectDataOnDemand: @Component;
    
    private Random ModuleProjectDataOnDemand.rnd = new SecureRandom();
    
    private List<ModuleProject> ModuleProjectDataOnDemand.data;
    
    @Autowired
    ProjectDataOnDemand ModuleProjectDataOnDemand.projectDataOnDemand;
    
    public ModuleProject ModuleProjectDataOnDemand.getNewTransientModuleProject(int index) {
        ModuleProject obj = new ModuleProject();
        setCreatedBy(obj, index);
        setCreatedDate(obj, index);
        setDateEnd(obj, index);
        setDateStart(obj, index);
        setModuleCode(obj, index);
        setModuleCost(obj, index);
        setModuleName(obj, index);
        setModuleStatus(obj, index);
        setStatus(obj, index);
        setUpdatedBy(obj, index);
        setUpdatedDate(obj, index);
        return obj;
    }
    
    public void ModuleProjectDataOnDemand.setCreatedBy(ModuleProject obj, int index) {
        String createdBy = "createdBy_" + index;
        obj.setCreatedBy(createdBy);
    }
    
    public void ModuleProjectDataOnDemand.setCreatedDate(ModuleProject obj, int index) {
        Date createdDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(createdDate);
    }
    
    public void ModuleProjectDataOnDemand.setDateEnd(ModuleProject obj, int index) {
        Date dateEnd = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateEnd(dateEnd);
    }
    
    public void ModuleProjectDataOnDemand.setDateStart(ModuleProject obj, int index) {
        Date dateStart = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateStart(dateStart);
    }
    
    public void ModuleProjectDataOnDemand.setModuleCode(ModuleProject obj, int index) {
        String moduleCode = "moduleCode_" + index;
        if (moduleCode.length() > 15) {
            moduleCode = moduleCode.substring(0, 15);
        }
        obj.setModuleCode(moduleCode);
    }
    
    public void ModuleProjectDataOnDemand.setModuleCost(ModuleProject obj, int index) {
        Double moduleCost = new Integer(index).doubleValue();
        if (moduleCost > 9999999.9999D) {
            moduleCost = 9999999.9999D;
        }
        obj.setModuleCost(moduleCost);
    }
    
    public void ModuleProjectDataOnDemand.setModuleName(ModuleProject obj, int index) {
        String moduleName = "moduleName_" + index;
        if (moduleName.length() > 40) {
            moduleName = moduleName.substring(0, 40);
        }
        obj.setModuleName(moduleName);
    }
    
    public void ModuleProjectDataOnDemand.setModuleStatus(ModuleProject obj, int index) {
        String moduleStatus = "moduleStatus_" + index;
        if (moduleStatus.length() > 15) {
            moduleStatus = moduleStatus.substring(0, 15);
        }
        obj.setModuleStatus(moduleStatus);
    }
    
    public void ModuleProjectDataOnDemand.setStatus(ModuleProject obj, int index) {
        String status = "status_" + index;
        obj.setStatus(status);
    }
    
    public void ModuleProjectDataOnDemand.setUpdatedBy(ModuleProject obj, int index) {
        String updatedBy = "updatedBy_" + index;
        obj.setUpdatedBy(updatedBy);
    }
    
    public void ModuleProjectDataOnDemand.setUpdatedDate(ModuleProject obj, int index) {
        Date updatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedDate(updatedDate);
    }
    
    public ModuleProject ModuleProjectDataOnDemand.getSpecificModuleProject(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ModuleProject obj = data.get(index);
        Long id = obj.getId();
        return ModuleProject.findModuleProject(id);
    }
    
    public ModuleProject ModuleProjectDataOnDemand.getRandomModuleProject() {
        init();
        ModuleProject obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ModuleProject.findModuleProject(id);
    }
    
    public boolean ModuleProjectDataOnDemand.modifyModuleProject(ModuleProject obj) {
        return false;
    }
    
    public void ModuleProjectDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ModuleProject.findModuleProjectEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ModuleProject' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ModuleProject>();
        for (int i = 0; i < 10; i++) {
            ModuleProject obj = getNewTransientModuleProject(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
